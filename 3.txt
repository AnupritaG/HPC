#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

int main() {
    // Sample data
    vector<int> data = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50};

    int n = data.size();
    
    // Parallel Reduction for Min, Max, Sum
    int min_val, max_val, sum_val;
    double avg_val;
    
    #pragma omp parallel
    {
        // Initialize variables
        int local_min = INT_MAX;
        int local_max = INT_MIN;
        int local_sum = 0;
        
        // Parallel for loop
        #pragma omp for
        for (int i = 0; i < n; ++i) {
            local_min = min(local_min, data[i]);
            local_max = max(local_max, data[i]);
            local_sum += data[i];
        }

        #pragma omp critical
        {
            // Combine results using critical section to avoid race conditions
            min_val = min(min_val, local_min);
            max_val = max(max_val, local_max);
            sum_val += local_sum;
        }
    }

    // Calculate average
    avg_val = static_cast<double>(sum_val) / n;

    // Output results
    cout << "Min: " << min_val << endl;
    cout << "Max: " << max_val << endl;
    cout << "Sum: " << sum_val << endl;
    cout << "Average: " << avg_val << endl;

    return 0;
}
