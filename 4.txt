#include <iostream>
#include <cstdlib>
#include <cuda_runtime.h>

using namespace std;

__global__ void add_vectors(const float *A, const float *B, float *C, int N) {
    int index = blockIdx.x * blockDim.x + threadIdx.x;
    if (index < N) C[index] = A[index] + B[index];
}

__global__ void matrix_vector_multiply(const float *A, const float *B, float *C, int N) {
    int row = blockIdx.x * blockDim.x + threadIdx.x;
    if (row < N) {
        float sum = 0.0;
        for (int i = 0; i < N; i++) sum += A[row * N + i] * B[i];
        C[row] = sum;
    }
}

int main() {
    int N;
    cout << "Enter size (N): ";
    cin >> N;

    // Allocate host memory
    float *h_A = new float[N * N], *h_B = new float[N], *h_C = new float[N], *h_D = new float[N];

    // Initialize data
    for (int i = 0; i < N; i++) {
        h_B[i] = rand() % 1000;
        for (int j = 0; j < N; j++) h_A[i * N + j] = rand() % 1000;
    }

    // Allocate device memory
    float *d_A, *d_B, *d_C, *d_D;
    cudaMalloc(&d_A, N * N * sizeof(float));
    cudaMalloc(&d_B, N * sizeof(float));
    cudaMalloc(&d_C, N * sizeof(float));
    cudaMalloc(&d_D, N * sizeof(float));

    // Copy data to device
    cudaMemcpy(d_A, h_A, N * N * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, N * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernels
    int blockSize = 256, numBlocks = (N + blockSize - 1) / blockSize;
    add_vectors<<<numBlocks, blockSize>>>(d_B, d_B, d_C, N);
    matrix_vector_multiply<<<numBlocks, blockSize>>>(d_A, d_B, d_D, N);

    // Copy results to host
    cudaMemcpy(h_C, d_C, N * sizeof(float), cudaMemcpyDeviceToHost);
    cudaMemcpy(h_D, d_D, N * sizeof(float), cudaMemcpyDeviceToHost);

    // Print results
    cout << "First 10 elements of C (B + B): ";
    for (int i = 0; i < 10 && i < N; i++) cout << h_C[i] << " ";
    cout << "\nFirst 10 elements of D (Matrix * Vector): ";
    for (int i = 0; i < 10 && i < N; i++) cout << h_D[i] << " ";
    cout << endl;

    // Cleanup
    delete[] h_A, delete[] h_B, delete[] h_C, delete[] h_D;
    cudaFree(d_A), cudaFree(d_B), cudaFree(d_C), cudaFree(d_D);

    return 0;
}

