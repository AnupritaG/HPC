#include <iostream>
#include <omp.h>
using namespace std;

void parallelBubbleSort(int arr[], int n) {
    #pragma omp parallel for
    for (int i = 0; i < n-1; i++)
        for (int j = 0; j < n-i-1; j++)
            if (arr[j] > arr[j+1]) swap(arr[j], arr[j+1]);
}

void merge(int arr[], int l, int m, int r) {
    int n1 = m-l+1, n2 = r-m, L[n1], R[n2];
    for (int i = 0; i < n1; i++) L[i] = arr[l+i];
    for (int j = 0; j < n2; j++) R[j] = arr[m+1+j];
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void parallelMergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = (l+r)/2;
        #pragma omp parallel sections
        {
            #pragma omp section
            parallelMergeSort(arr, l, m);
            #pragma omp section
            parallelMergeSort(arr, m+1, r);
        }
        merge(arr, l, m, r);
    }
}

int main() {
    int choice, arr[] = {38, 27, 43, 3, 9, 82, 10};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << "1. Parallel Bubble Sort\n2. Parallel Merge Sort\nChoose: ";
    cin >> choice;
    if (choice == 1) parallelBubbleSort(arr, n);
    else if (choice == 2) parallelMergeSort(arr, 0, n-1);
    else return cout << "Invalid choice!\n", 1;
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    cout << endl;
}


